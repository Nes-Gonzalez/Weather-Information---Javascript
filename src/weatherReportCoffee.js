// Generated by CoffeeScript 1.9.3
(function() {
  var idsAndData, idsWithErrors, numberOfIds;

  numberOfIds = 0;

  idsAndData = [];

  idsWithErrors = [];

  exports.idsAndData = idsAndData;

  exports.idsWithErrors = idsWithErrors;

  exports.numberOfIds = numberOfIds;

  exports.city;

  exports.state;

  exports.readFile = function(file, callback) {
    var fs;
    fs = require('fs');
    return fs.readFile(file, 'utf8', callback);
  };

  exports.splitIDs = function(error, data) {
    var i, id, idsFromData, len, results;
    idsFromData = data.split('\n');
    numberOfIds = idsFromData.length;
    results = [];
    for (i = 0, len = idsFromData.length; i < len; i++) {
      id = idsFromData[i];
      results.push(exports.requestCityWeather(id));
    }
    return results;
  };

  exports.requestCityWeather = function(id) {
    var collectBody, http, url;
    http = require('http');
    url = "http://weather.yahooapis.com/forecastrss?w=" + id + "&u=f";
    collectBody = function(response) {
      var SendToCheck, combineChunk, data;
      data = '';
      combineChunk = function(chunkPart) {
        return data += chunkPart;
      };
      SendToCheck = function() {
        return exports.checkRequestForError(id, data);
      };
      response.on('data', combineChunk);
      return response.on('end', SendToCheck);
    };
    return http.get(url, collectBody);
  };

  exports.checkRequestForError = function(id, data) {
    var index;
    index = data.indexOf('Yahoo! Weather - Error');
    if (index >= 0) {
      exports.serverRequestError(id);
    } else {
      exports.serverRequestSuccessful(id, data);
    }
    return exports.checkLastServerRequest(idsAndData, idsWithErrors, numberOfIds);
  };

  exports.serverRequestSuccessful = function(id, serverOutput) {
    return idsAndData.push({
      theId: id,
      content: serverOutput
    });
  };

  exports.serverRequestError = function(id) {
    return idsWithErrors.push(id);
  };

  exports.checkLastServerRequest = function(withData, withErrors, TotalIds) {
    if (withData.length + withErrors.length === TotalIds) {
      return exports.parseFinalContent(idsAndData);
    }
  };

  exports.parseFinalContent = function(content) {
    var city, finalContent, i, len, n, state, temp;
    finalContent = [];
    for (i = 0, len = content.length; i < len; i++) {
      n = content[i];
      city = n.content.substring(n.content.indexOf('city="') + 6, n.content.indexOf('" region='));
      state = n.content.substring(n.content.indexOf('region="') + 8, n.content.indexOf('"   country'));
      temp = n.content.substring(n.content.indexOf('temp="') + 6, n.content.indexOf('"  date'));
      finalContent.push({
        city: city,
        state: state,
        temp: temp
      });
    }
    exports.city = city;
    exports.state = state;
    exports.temp = temp;
    return exports.sortFinalContent(finalContent);
  };

  exports.sortFinalContent = function(contentToSort) {
    var sorter;
    sorter = function(a, b) {
      if (a.city < b.city) {
        return -1;
      } else if (a.city > b.city) {
        return 1;
      } else {
        if (a.state < b.state) {
          return -1;
        } else if (a.state > b.state) {
          return 1;
        }
      }
    };
    contentToSort.sort(sorter);
    return exports.displayResults(contentToSort);
  };

  exports.displayResults = function(sortedContent) {
    var weatherReportCoffeeDriver;
    weatherReportCoffeeDriver = require('../src/weatherReportCoffeeDriver');
    return weatherReportCoffeeDriver.displayResults(sortedContent);
  };

}).call(this);
